#!/bin/bash

pushd transforms/build-${LLVM_VERSION} || exit 1
SYMBIOTIC_VERSION=`git rev-parse HEAD`
SYMBIOTIC_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE[:=]' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
popd

pushd sbt-dg/build-${LLVM_VERSION} || exit 1
DG_VERSION=`git rev-parse HEAD`
DG_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE[:=]' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
popd

pushd sbt-slicer/build-${LLVM_VERSION} || exit 1
SBT_SLICER_VERSION=`git rev-parse HEAD`
SBT_SLICER_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE[:=]' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
popd

pushd sbt-instrumentation/build-${LLVM_VERSION} || exit 1
INSTRUMENTATION_VERSION=`git rev-parse HEAD`
INSTRUMENTATION_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE[:=]' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
popd

if [ "$BUILD_STP" = "yes" ]; then
	cd minisat || exit 1
	MINISAT_VERSION=`git rev-parse HEAD`
	cd -
	cd stp || exit 1
	STP_VERSION=`git rev-parse HEAD`
	cd -
fi

if [ "$BUILD_Z3" = "yes" ]; then
	pushd z3/build || exit 1
	Z3_VERSION=`git rev-parse HEAD`
	Z3_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE[:=]' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
	popd
fi

if [ "$BUILD_KLEE" = "yes" ]; then
	pushd klee/build-${LLVM_VERSION} || exit 1
	KLEE_VERSION=`git rev-parse HEAD`
	KLEE_BUILD_TYPE=$(grep 'CMAKE_BUILD_TYPE[:=]' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
	KLEE_RUNTIME_BUILD_TYPE=$(grep '^KLEE_RUNTIME_BUILD_TYPE[^-]' CMakeCache.txt | sed 's@.*=\(.*\)@\1@')
	popd
fi

VERSFILE="$SRCDIR/lib/symbioticpy/symbiotic/versions.py"
echo "#!/usr/bin/python" > $VERSFILE
echo "# This file is automatically generated by symbiotic-build.sh" >> $VERSFILE
echo "" >> $VERSFILE
echo "versions = {" >> $VERSFILE
echo -e "\t'symbiotic' : '$SYMBIOTIC_VERSION'," >> $VERSFILE
echo -e "\t'dg' : '$DG_VERSION'," >> $VERSFILE
echo -e "\t'sbt-slicer' : '$SBT_SLICER_VERSION'," >> $VERSFILE
echo -e "\t'sbt-instrumentation' : '$INSTRUMENTATION_VERSION'," >> $VERSFILE

if [ "$BUILD_STP" = "yes" ]; then
	echo -e "\t'minisat' : '$MINISAT_VERSION'," >> $VERSFILE
	echo -e "\t'stp' : '$STP_VERSION'," >> $VERSFILE
fi

if [ "$BUILD_Z3" = "yes" ]; then
	echo -e "\t'z3' : '$Z3_VERSION'," >> $VERSFILE
fi

echo -e "\t'klee' : '$KLEE_VERSION'," >> $VERSFILE
echo -e "}\n" >> $VERSFILE

echo -e "llvm_version = '${LLVM_VERSION}'\n" >> $VERSFILE

echo "build_types = {" >> $VERSFILE
echo -e "\t'symbiotic' : '$SYMBIOTIC_BUILD_TYPE'," >> $VERSFILE
echo -e "\t'dg' : '$DG_BUILD_TYPE'," >> $VERSFILE
echo -e "\t'sbt-slicer' : '$SBT_SLICER_BUILD_TYPE'," >> $VERSFILE
echo -e "\t'sbt-instrumentation' : '$INSTRUMENTATION_BUILD_TYPE'," >> $VERSFILE

if [ "$BUILD_Z3" = "yes" ]; then
	echo -e "\t'z3' : '$Z3_BUILD_TYPE'," >> $VERSFILE
fi

echo -e "\t'klee' : '$KLEE_BUILD_TYPE'," >> $VERSFILE
echo -e "\t'klee-runtime' : '$KLEE_RUNTIME_BUILD_TYPE'," >> $VERSFILE
echo -e "}\n" >> $VERSFILE

